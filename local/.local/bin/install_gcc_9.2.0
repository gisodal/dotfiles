#!/bin/bash

set -e

if [ -z "${BASH_VERSINFO}" ] || [ -z "${BASH_VERSINFO[0]}" ] || [ ${BASH_VERSINFO[0]} -lt 4 ]; then
    echo "This script requires Bash version >= 4"
    exit 1
fi

# color printers
grn() {
    echo -e "\033[32m$@\033[0m"
}

red() {
    echo -e "\033[31m$@\033[0m"
}

PREFIX="$HOME/gcc"
SRC="$PREFIX/src"

export LD_LIBRARY_PATH=$PREFIX/lib:$PREFIX/lib64:$LD_LIBRARY_PATH
export C_INCLUDE_PATH=$PREFIX/include
export CPLUS_INCLUDE_PATH=$PREFIX/include

export THREADS=$(grep -c ^processor /proc/cpuinfo)
if [ -z "$THREADS" ]; then
    export THREADS=4
fi

BINUTILS="binutils"
MPFR="mpfr"
MPC="mpc"
GMP="gmp"
ELF="libelf"
CLOOG="cloog"
ISL="isl"
GCC="gcc"

# all tools that will be installed, in listed order
TOOLS=($BINUTILS $GMP $MPFR $MPC $ELF $ISL $CLOOG $GCC)

# download urls of tools
declare -A LOCATION
LOCATION=(
    [$BINUTILS]="https://ftp.gnu.org/gnu/binutils/binutils-2.33.1.tar.xz"
    [$GMP]="https://gmplib.org/download/gmp/gmp-6.1.2.tar.xz"
    [$MPFR]="https://www.mpfr.org/mpfr-current/mpfr-4.0.2.tar.xz"
    [$MPC]="https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz"
    [$ELF]="https://fossies.org/linux/misc/old/libelf-0.8.13.tar.gz"
    [$ISL]="http://isl.gforge.inria.fr/isl-0.18.tar.xz"
    [$CLOOG]="https://www.bastoul.net/cloog/pages/download/cloog-0.18.4.tar.gz"
    [$GCC]="https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.xz"
    )

# configure options for each tool
declare -A OPTIONS
OPTIONS=(
    [$BINUTILS]="--prefix=$PREFIX"
    [$GMP]="--prefix=$PREFIX --enable-static"
    [$MPFR]="--prefix=$PREFIX --enable-static --with-gmp=$PREFIX"
    [$MPC]="--prefix=$PREFIX --enable-static --with-gmp=$PREFIX --with-mpfr=$PREFIX"
    [$ELF]="--prefix=$PREFIX --enable-static"
    [$ISL]="--prefix=$PREFIX --enable-static --with-gmp-prefix=$PREFIX"
    [$CLOOG]="--prefix=$PREFIX --enable-static --with-gmp-prefix=$PREFIX --with-isl=system"
    [$GCC]="--prefix=$PREFIX \
        --enable-languages=c,c++ \
        --enable-shared \
        --enable-static \
        --enable-languages=c,c++ \
        --enable-bootstrap \
        --disable-multilib \
        --with-gmp=$PREFIX \
        --with-mpfr=$PREFIX \
        --with-mpc=$PREFIX \
        --with-libelf=$PREFIX \
        --with-isl=$PREFIX \
        --with-cloog=$PREFIX \
        --with-fpmath=sse"
)

function extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.*)     tar xvf $1    ;;
            *.bz2)       bunzip2 $1    ;;
            *.rar)       unrar x $1    ;;
            *.gz)        gunzip $1     ;;
            *.tbz2)      tar xvjf $1   ;;
            *.tgz)       tar xvzf $1   ;;
            *.zip)       unzip $1      ;;
            *.Z)         uncompress $1 ;;
            *.7z)        7z x $1       ;;
            *)           echo "I don't know how to extract '$1'..." ;;
        esac
        if [ $? -ne 0 ]; then
            red "Extraction of $1 failed"
            exit 1
        fi
    else
        echo "'$1' is not a valid archive file!"
        exit 1
    fi
}

function download() {
    TOOL=$1
    grn "Download $TOOL"

    wget -N ${LOCATION[$TOOL]}
    if [[ $? -ne 0 ]]; then
        red "downloading $TOOL failed from location '${LOCATION[$TOOL]}'"
        exit 1
    fi
}

function unpack() {
    TOOL=$1
    grn "Unpack $TOOL"

    TAR=$(find . -maxdepth 1 -name "$TOOL*tar*" -type f | head -1)
    if [ ! -f "$TAR" ]; then
        red "Can't find tool $TOOL's tar $TAR"
        exit 1
    fi

    extract $TAR
}

function install() {
    TOOL=$1
    grn "Install $TOOL"

    CONFIGURE=$(find . -maxdepth 2 -path "*$TOOL*/configure" -type f | head -1)
    if [ ! -f "$CONFIGURE" ]; then
        red "Can't find tool $TOOL's configure script"
        exit 1
    fi

    TOOLDIR=$(dirname $CONFIGURE)
    if [ ! -d "$TOOLDIR" ]; then
        red "Can't find tool $TOOL directory"
        exit 1
    fi

    (
        cd $TOOLDIR &&
        ./$(basename $CONFIGURE) ${OPTIONS[$TOOL]} &&
        LD_LIBRARY_PATH="$PREFIX/lib64:$PREFIX/lib${LD_LIBRARY_PATH:+:}$LD_LIBRARY_PATH"  make -j $THREADS &&
        make install
    )

    if [ $? -ne 0 ]; then
        red "Installation failed for tool $TOOL"
        exit 1
    fi
}

mkdir -p $SRC
cd $SRC

for TOOL in ${TOOLS[@]}; do
    download $TOOL
    unpack   $TOOL
    install  $TOOL
done

grn
grn "Don't forget to update:"
grn "  * LD_LIBRARY_PATH with '$PREFIX/lib:$PREFIX/lib64'"
grn "  * C_INCLUDE_PATH with '$PREFIX/include'"
grn "  * CPLUST_INCLUDE_PATH with '$PREFIX/include'"
grn "  * PATH with $PREFIX/bin"

