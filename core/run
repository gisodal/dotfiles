#!/bin/bash -e

# Check for Bash 4+ for associative arrays
if ((BASH_VERSINFO[0] < 4)); then
  if [ "$(uname)" == "Darwin" ]; then
    exec /opt/homebrew/bin/bash "$0" "$@"
  else
    echo "This script requires Bash version 4 or higher. You're running $BASH_VERSION."
    exit 1
  fi
fi

TEST_SYSTEM=${DOTKEEPER_TEST_SYSTEM:-ubuntu-24.04}
LOGLEVEL=${DOTKEEPER_LOGLEVEL:-info}
DRYRUN=${DOTKEEPER_DRYRUN}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
ME="$(basename "$0")"

# load scripts
DIR=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" >/dev/null 2>&1 && pwd)
for script in "$DIR"/src/*.sh; do
  source "$script"
done

function usage() {
  cat <<EOF
Usage: $ME [-v|-vv|-r] <command> [args]:

  Commands                   Description
  --------                   -----------
  list-stow                  List stowable packages
  stow [<package>]           Stow <package> config
  list-install               List installers
  install [<packages>]       Run <packages> installer
  env                        Load environment variables
  test [-d|-a|-s] [command]  Run tests, or test a specific command
  check <package>            Check if a package is installed

  Flags
  -----
  -v                         Debug output
  -vv                        Verbose output
  -r                         Dry run
  -a                         Attach to the test container
  -d                         Debug container. Get shell on failure.
  -s                         Select test system (default: $TEST_SYSTEM)

  Examples
  --------
  $ME stow
  $ME stow nvim
  $ME install
  $ME install lynx
  $ME test install lynx
  $ME env
EOF
  exit 1
}

# process flags
while [[ $# -gt 0 && "$1" == -* ]]; do
  case "$1" in
  -v)
    LOGLEVEL="debug"
    ;;
  -vv)
    LOGLEVEL="verbose"
    ;;
  -r)
    DRYRUN="yes"
    ;;
  *)
    usage
    exit 1
    ;;
  esac
  shift
done

# activate verbosity
[ $LOGLEVEL == "verbose" ] && set -x

# setup some directories we want anyway
mkdir -p "$XDG_CONFIG_HOME"
mkdir -p "$HOME/.local/bin"

if ! have-command stow; then
  echo 'Error: GNU Stow is not installed.' >&2
  install stow || exit 1
fi

function run() {
  case "$1" in
  'list-stow')
    get-stow-list
    ;;
  'list-install')
    get-installer-list
    ;;
  'stow')
    shift
    if [[ $# -eq 0 ]]; then
      if [ -t 0 ] && have-command fzf; then
        PKG=$(get-stow-list | fzf --header "Select a package stow")
        [[ -n $PKG ]] && stow-install $PKG
      else
        get-stow-list
      fi
    else
      stow-install $1
    fi
    ;;

  'install')
    shift
    if [[ $# -eq 0 ]]; then
      if [ -t 0 ] && have-command fzf; then
        PKG=$(get-installer-list | fzf --header "Select what you want to install")
        [[ -n $PKG ]] && install $PKG
      else
        get-installer-list
      fi
    else
      install $1
    fi
    ;;

  'check')
    shift
    is-installed $1
    ;;

  'env')
    (load_environment && bash)
    ;;

  'test')
    shift

    debug_mode=0
    attach_mode=0
    if [[ $# -gt 0 && "$1" == -* ]]; then
      case "$1" in
      -d)
        log warn "Running in debug mode"
        export CONTAINER_DEBUG=1
        ;;
      -s)
        export SYSTEM_SELECT="yes"
        ;;
      -a)
        attach_mode=1
        ;;
      *)
        usage
        exit 1
        ;;
      esac
      shift
    fi

    {
      if [ "$attach_mode" -eq 1 ]; then
        attach-docker-container
      else
        DIR=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" >/dev/null 2>&1 && pwd)
        . $DIR/test/tests.sh $@
      fi
    }
    ;;

  *)
    usage
    ;;
  esac
}

run $@
