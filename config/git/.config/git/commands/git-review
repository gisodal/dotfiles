#!/bin/bash -e

function exit_handler {
  if [ "$CURRENT_BRANCH" != "$(git rev-parse --abbrev-ref HEAD)" ]; then
    echo "Going back to: $CURRENT_BRANCH"
    git checkout $CURRENT_BRANCH
  fi
}

trap exit_handler EXIT

# set the feature branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
FEATURE_BRANCH=$CURRENT_BRANCH
if [ $# -gt 0 ]; then
  FEATURE_BRANCH=$1
fi

if [ ! $(git rev-parse --verify $FEATURE_BRANCH 2>/dev/null) ] && [ ! $(git rev-parse --verify origin/$FEATURE_BRANCH 2>/dev/null) ]; then
  echo "Branch '$FEATURE_BRANCH' does not exist." 1>&2
  exit 1
fi
echo "Determined feature branch: $FEATURE_BRANCH"

# set the merge branch
DEFAULT_MERGE_BRANCH=$(basename $(git rev-parse --abbrev-ref origin/HEAD) || git branch --sort=-committerdate -l main master | head -1 | sed 's/^[^a-zA-Z]*//')

if [[ -z $DEFAULT_MERGE_BRANCH ]]; then
  echo "No default branch found." 1>&2
  exit 1
fi

MERGE_BRANCH=$DEFAULT_MERGE_BRANCH
if [ $# -ge 2 ]; then
  MERGE_BRANCH=$2
fi

if [ ! $(git rev-parse --verify $MERGE_BRANCH 2>/dev/null) ]; then
  echo "Branch '$MERGE_BRANCH' does not exist." 1>&2
  exit 1
fi
echo "Determined merge branch: $MERGE_BRANCH"

# go to the feature branch
if [ "$FEATURE_BRANCH" != "$(git rev-parse --abbrev-ref HEAD)" ]; then
  echo "Checking out branch '$FEATURE_BRANCH'"
  git checkout $FEATURE_BRANCH
fi

BASE_COMMIT=$(git merge-base $MERGE_BRANCH HEAD)

if [[ -z $BASE_COMMIT ]]; then
  echo "HEAD ($FEATURE_BRANCH) has no common base with branch '$MERGE_BRANCH'." 1>&2
  exit 1
fi

# Go to the repository root
command cd $(git rev-parse --show-toplevel)

# Create diff with base commit branch and save it
echo "Creating diff"
PATCH=/tmp/pr-diff.patch
git diff $BASE_COMMIT >$PATCH

# Get list of changed files compared to the base commit
CHANGED_FILES=$(git diff --name-only $BASE_COMMIT)

# If no files changed, exit
if [ -z "$CHANGED_FILES" ]; then
  echo "No files have changed"
  exit 1
fi

# Store prompt in temporary file
PROMPT_FILE=$(mktemp)
cat >$PROMPT_FILE <<EOF
> /COPILOT_REVIEW
> #buffers

Please review the latest changes ($PATCH). $PATCH has already been applied. Try to use actual code file locations rather than diff line numbers.

focus on the following:

1. Potential bugs or edge cases
2. Code style and best practices
3. Performance considerations
4. Security implications
5. Coverage by Unit or integration tests
6. Function documentation
7. typos
EOF

# Open nvim with the changed files, the diff, and launch Copilot Chat to review the changes
nvim -R $PATCH $CHANGED_FILES -c "CopilotChat" -c "CopilotChatOpen" -c "r $PROMPT_FILE" -c "stopinsert"

rm $PROMPT_FILE
rm $PATCH
