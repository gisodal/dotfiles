#!/bin/bash -e

if ! git rev-parse --is-inside-work-tree 2>/dev/null 1>&2; then
  echo "This script should not be run inside a git repository."
  exit 1
fi

ROOT_PATH="$(git rev-parse --show-toplevel)"
GIT_PATH="$ROOT_PATH/.git"
GIT_HOOK="$GIT_PATH/hooks/commit-msg"

mkdir -p "$(dirname '$GIT_HOOK')"

echo "Writing commit hook to '$GIT_HOOK'"
cat >"$GIT_HOOK" <<CAT_EOF
#!/bin/bash -e

# Read the commit message
commit_msg=\$(cat "\$1")

# Define the regex pattern for conventional commits
# format: type(scope): description
pattern='^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([a-z ]+\))?[!]?: [^\.]+$'

function error_exit {
  cat <<EOF
Error: Commit message doesn't follow the conventional commit format.

Please use format:
  <type>[(scope)][!]: <description>

  [optional body]

  [optional footer(s)]

Allowed types: build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test.

Example:
  git commit -m 'feat(user)!: add feature' -m 'body message' -m 'BREAKING CHANGE: description'
EOF
}

# Check if the commit message matches the pattern
if ! [[ "\$(echo "\$commit_msg" | head -n1)"  =~ \$pattern ]]; then
  error_exit
  exit 1
fi
CAT_EOF

chmod +x "$GIT_HOOK"

echo -e "\nYou are all set!"
